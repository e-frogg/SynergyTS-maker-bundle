<template>
{% for relation in relations %}
    <v-dialog v-model="{{ relation.fieldName }}Modal" width="auto" close-on-back="false" >
      <{{ relation.editFormFile | toKebabCase }} :{{ relation.fieldNameKebab }}="{{ relation.fieldName }}Modal" @close="{{ relation.fieldName }}Modal=null" @save="on{{ relation.fieldName | capitalize }}Saved"/>
    </v-dialog>
{% endfor %}

    <v-card v-if="{{ entityName }}" :title="modalTitle({{ entityName }})">
      <v-card-text>
{% for formField in formFields %}

{% if formField.formType == 'datetime-local' %}
        <!--{{ formField.fieldName }}-->
        <sp-date-field :date="{{ entityName }}.{{ formField.fieldName }}"
                      :label="t('{{ formField.translationLabel }}')"{{ formField.required?' required':'' }}{{ formField.disabled?' disabled':'' }}>
        </sp-date-field>
{% else  %}
        <!--{{ formField.fieldName }}-->
        <v-text-field {% if formField.formType %}type="{{ formField.formType }}" {% endif %}v-model.number="{{ entityName }}.{{ formField.fieldName }}"
                      :label="t('{{ formField.translationLabel }}')"{{ formField.required?' required':'' }}{{ formField.disabled?' disabled':'' }}>
        </v-text-field>
{% endif %}
{% endfor %}
{% for relation in relations %}

        <!--partType-->
        <v-row justify="end">
          <v-col cols="8">
            <v-autocomplete
                :items="{{ relation.repository }}.getItems()"
                item-title="name"
                item-value="id"
                v-model="{{ entityName }}.{{ relation.fieldName }}Id"
                :label="t('{{ relation.translationLabel }}')"
                required
            ></v-autocomplete>
          </v-col>
          <v-col cols="4">
            <v-btn icon='mdi-plus-thick' @click="{{ relation.fieldName }}Modal=new {{ relation.entityClass }}()" variant="tonal" color="primary"
                   size="small"></v-btn>
            <v-btn v-if="{{ entityName }}.{{ relation.fieldName }}" icon='mdi-pencil' @click="{{ relation.fieldName }}Modal={{ entityName }}.{{ relation.fieldName }}" variant="tonal"
                   color="secondary" size="small"></v-btn>
          </v-col>
        </v-row>
{% endfor %}
      </v-card-text>

      <v-card-actions>
        <v-container>
          <v-row justify="end">
            <v-btn prepend-icon="mdi-close" color="grey" @click="close()">Fermer</v-btn>
            <v-btn prepend-icon="mdi-check" color="primary" @click="save()">Enregistrer</v-btn>
          </v-row>
        </v-container>
      </v-card-actions>
    </v-card>
</template>
<script setup lang="ts">
import {{ entityClass }} from "../Entity/{{ entityClass }}";
import {useLocale} from "vuetify";
import Entity from "Synergy/Data/Entity";
import SpDateField from "../Form/SpDateField.vue";

{% if relations is not empty %}
import {Ref, ref} from "vue";
{% endif %}

import entityManagerService from "Synergy/Data/EntityManager";
{% for relation in relations %}
import {{ relation.entityClass }} from "../../data/entity/{{ relation.entityClass }}";
import { {{relation.repository}} } from "../../data/RepositoryManager";
import {{ relation.editFormFile }} from "./{{ relation.editFormFile }}.vue";
{% endfor %}

{% for relation in relations %}
const {{ relation.fieldName }}Modal: Ref<{{ relation.entityClass }} | null> = ref(null)
{% endfor %}

const props = defineProps({
  {{ entityName }}: {
    type: {{ entityClass }},
    required: true
  }
})
const {t} = useLocale()
const emit = defineEmits(['close', 'save']);

function close() {
  emit('close')
}

function modalTitle(entity: Entity): string {
  let className = entity.constructor.name;
  return entity.getId()
      ? t('srPit.entities.' + className + '.listing.edit')
      : t('srPit.entities.' + className + '.listing.add');
}

function save() {
  entityManagerService
      .save(props.{{ entityName }})
      .then(() => {
        emit('save', props.{{ entityName }});
      })
      .catch((e) => {
        console.error(e);
      });
}
{% for relation in relations %}
function on{{ relation.fieldName | capitalize }}Saved({{ relation.fieldName }}: {{ relation.entityClass }}) {
  props.{{ entityName }}.{{ relation.fieldName }}Id = {{ relation.fieldName }}.getId();
  {{ relation.fieldName }}Modal.value = null;
}
{% endfor %}

</script>
